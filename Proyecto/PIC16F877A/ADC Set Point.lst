CCS PCM C Compiler, Version 5.076, 56587               24-feb.-22 12:25

               Filename:   E:\Martin Hdez\Desktop\CCS 16F\877A\Práctica 6\ADC Set Point.lst

               ROM used:   59 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   014
0003:  NOP
.................... /* 
.................... AUTOR: MICROSIDE TECHNOLOGY S.A. DE C.V. 
.................... FECHA: JUNIO 2019 
.................... */ 
....................  
.................... /* 
.................... --------------------------------------------------------------------------- 
.................... Implementar una lectura analógica de un potenciómetro, si el valor del ADC supera 
.................... un Set Point, el LED encenderá. 
.................... --------------------------------------------------------------------------- 
.................... */ 
....................  
....................  
.................... #include <16F877A.h>                            //Incluye el microcontrolador con el que se va a trabajar  
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #DEVICE ADC=8                                   //Configura el ADC a 8 bits 
.................... #use delay(clock=20Mhz, crystal)                //Tipo de oscilador y frecuencia dependiendo del microcontrolador  
....................  
....................  
.................... #define LED PIN_A1                              //Pin donde está conectado el LED del X-TRAINER 
....................  
.................... int ValorPot;                                   //Variable para almacenar el valor leído del ADC 
....................  
.................... void SisInit(void) 
....................  
.................... { 
....................  
.................... //setup_oscillator(OSC_8MHZ);                    //Configura oscilador interno 
....................  
.................... setup_adc_ports (AN0);                         //Configura solo el puerto A0 como entrada analógica 
0004:  BSF    03.5
0005:  BCF    1F.0
0006:  BSF    1F.1
0007:  BSF    1F.2
0008:  BSF    1F.3
....................  
.................... setup_adc (ADC_CLOCK_DIV_8);                   //Configura oscilador para la conversión 
0009:  BCF    1F.6
000A:  BCF    03.5
000B:  BSF    1F.6
000C:  BCF    1F.7
000D:  BSF    03.5
000E:  BCF    1F.7
000F:  BCF    03.5
0010:  BSF    1F.0
0011:  BCF    0A.3
0012:  BCF    0A.4
0013:  GOTO   021 (RETURN)
....................  
.................... } 
....................  
....................   
....................  
.................... void main() 
0014:  MOVF   03,W
0015:  ANDLW  1F
0016:  MOVWF  03
0017:  BSF    03.5
0018:  BSF    1F.0
0019:  BSF    1F.1
001A:  BSF    1F.2
001B:  BCF    1F.3
001C:  MOVLW  07
001D:  MOVWF  1C
001E:  BCF    03.7
....................  
.................... { 
....................  
....................     SisInit(); 
001F:  BCF    03.5
0020:  GOTO   004
....................  
....................     while (1) 
....................  
....................   { 
....................  
....................        set_adc_channel (0);                 //Selecciona el canal 0 para la conversión 
0021:  MOVLW  00
0022:  MOVWF  78
0023:  MOVF   1F,W
0024:  ANDLW  C7
0025:  IORWF  78,W
0026:  MOVWF  1F
....................  
....................        ValorPot = read_adc ();              //Lee el valor del ADC y lo guarda en la variable 
0027:  BSF    1F.2
0028:  BTFSC  1F.2
0029:  GOTO   028
002A:  MOVF   1E,W
002B:  MOVWF  20
....................  
....................       if (ValorPot >= 128)                  //Compara el valor de el ADC con 128 
002C:  MOVF   20,W
002D:  SUBLW  7F
002E:  BTFSC  03.0
002F:  GOTO   035
....................  
....................              { 
....................  
....................                      output_HIGH (LED);     // Leds activos 
0030:  BSF    03.5
0031:  BCF    05.1
0032:  BCF    03.5
0033:  BSF    05.1
....................  
....................              } 
0034:  GOTO   039
....................  
....................       else 
....................  
....................              { 
....................  
....................                     output_LOW (LED);       // Leds activos 
0035:  BSF    03.5
0036:  BCF    05.1
0037:  BCF    03.5
0038:  BCF    05.1
....................  
....................              } 
0039:  GOTO   021
....................  
....................        } 
....................  
.................... } 
....................  
003A:  SLEEP
....................   

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

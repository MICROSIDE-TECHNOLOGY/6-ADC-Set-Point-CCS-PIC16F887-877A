CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 15:04
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\6-ADC-Set-Point-CCS-PIC16F887-877A\Proyecto\PIC16F877A\ADC Set Point.lst

               ROM used:   53 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... ADC Set Point.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Implementar una lectura analógica de un potenciómetro, si el valor del ADC supera
.................... un Set Point, el LED encenderá.
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F877A.h>                 //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #DEVICE ADC=8                        //Configura el ADC a 8 bits
.................... #use delay ( clock=20Mhz, crystal )  //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
.................... 
.................... #define LED PIN_A1                   //Pin donde está conectado el LED del X-TRAINER
.................... 
.................... int ValorPot;                        //Variable para almacenar el valor leído del ADC
.................... 
.................... void main ( void ) {
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  MOVLW  07
000D:  MOVWF  1C
000E:  BCF    03.7
....................     setup_adc_ports ( AN0 );         //Configura solo el puerto A0 como entrada analógica
000F:  BCF    1F.0
0010:  BSF    1F.1
0011:  BSF    1F.2
0012:  BSF    1F.3
....................     setup_adc ( ADC_CLOCK_DIV_8 );   //Configura oscilador para la conversión
0013:  BCF    1F.6
0014:  BCF    03.5
0015:  BSF    1F.6
0016:  BCF    1F.7
0017:  BSF    03.5
0018:  BCF    1F.7
0019:  BCF    03.5
001A:  BSF    1F.0
.................... 
....................     while ( 1 ) {
....................         set_adc_channel ( 0 );       //Selecciona el canal 0 para la conversión
001B:  MOVLW  00
001C:  MOVWF  78
001D:  MOVF   1F,W
001E:  ANDLW  C7
001F:  IORWF  78,W
0020:  MOVWF  1F
....................         ValorPot = read_adc ( );     //Lee el valor del ADC y lo guarda en la variable
0021:  BSF    1F.2
0022:  BTFSC  1F.2
0023:  GOTO   022
0024:  MOVF   1E,W
0025:  MOVWF  20
.................... 
....................         if ( ValorPot >= 128 ) {     //Compara el valor de el ADC con 128
0026:  MOVF   20,W
0027:  SUBLW  7F
0028:  BTFSC  03.0
0029:  GOTO   02F
....................             output_HIGH ( LED );     // Leds activos
002A:  BSF    03.5
002B:  BCF    05.1
002C:  BCF    03.5
002D:  BSF    05.1
....................         } else {
002E:  GOTO   033
....................             output_LOW ( LED );      // Leds activos
002F:  BSF    03.5
0030:  BCF    05.1
0031:  BCF    03.5
0032:  BCF    05.1
....................         }
0033:  GOTO   01B
....................     }
.................... }
0034:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

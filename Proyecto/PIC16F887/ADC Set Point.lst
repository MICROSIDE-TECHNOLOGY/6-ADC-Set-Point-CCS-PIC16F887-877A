CCS PCM C Compiler, Version 5.115d, 1               29-ago.-23 15:10
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\victo\OneDrive\Documentos\X-TRAINER-hands-on\CCS\PIC16F\6-ADC-Set-Point-CCS-PIC16F887-877A\Proyecto\PIC16F887\ADC Set Point.lst

               ROM used:   73 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... /************************************************************************************************
.................... Company:
.................... Microside Technology Inc.
.................... File Name:
.................... ADC Set Point.c
.................... Product Revision  :  1
.................... Device            :  X-TRAINER
.................... Driver Version    :  1.0
.................... ************************************************************************************************/
.................... 
.................... /*
.................... ---------------------------------------------------------------------------
.................... Implementar una lectura analógica de un potenciómetro, si el valor del ADC supera
.................... un Set Point, el LED encenderá.
.................... ---------------------------------------------------------------------------
.................... */
.................... 
.................... #include <16F887.h>                  //Incluye el microcontrolador con el que se va a trabajar 
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
.................... 
.................... #list
.................... 
.................... #DEVICE ADC = 8                      //Configura el ADC a 8 bits
.................... #use delay ( clock=20Mhz, crystal )  //Tipo de oscilador y frecuencia dependiendo del microcontrolador 
.................... 
.................... #define LED PIN_A1                   //Pin donde está conectado el LED del X-TRAINER
.................... 
.................... int ValorPot;                        //Variable para almacenar el valor leído del ADC
....................  
.................... void main ( void ) {
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    03.6
0009:  MOVF   09,W
000A:  ANDLW  C0
000B:  MOVWF  09
000C:  BCF    03.6
000D:  BCF    1F.4
000E:  BCF    1F.5
000F:  MOVLW  00
0010:  BSF    03.6
0011:  MOVWF  08
0012:  BCF    03.5
0013:  CLRF   07
0014:  CLRF   08
0015:  CLRF   09
0016:  BCF    03.7
....................     setup_oscillator ( OSC_8MHZ );   //Configura oscilador interno
0017:  MOVLW  71
0018:  BSF    03.5
0019:  BCF    03.6
001A:  MOVWF  0F
001B:  CLRF   10
001C:  MOVF   0F,W
....................     setup_adc_ports ( sAN0 );        //Configura solo el puerto A0 como entrada analógica
001D:  BSF    03.6
001E:  MOVF   09,W
001F:  ANDLW  C0
0020:  MOVWF  09
0021:  BCF    03.6
0022:  BCF    1F.4
0023:  BCF    1F.5
0024:  MOVLW  01
0025:  BSF    03.6
0026:  MOVWF  08
....................     setup_adc ( ADC_CLOCK_DIV_8 );   //Configura oscilador para la conversión
0027:  BCF    03.5
0028:  BCF    03.6
0029:  BSF    1F.6
002A:  BCF    1F.7
002B:  BSF    03.5
002C:  BCF    1F.7
002D:  BCF    03.5
002E:  BSF    1F.0
.................... 
....................     while (1) {
....................         set_adc_channel ( 0 );       //Selecciona el canal 0 para la conversión
002F:  MOVLW  00
0030:  MOVWF  78
0031:  MOVF   1F,W
0032:  ANDLW  C3
0033:  IORWF  78,W
0034:  MOVWF  1F
....................         ValorPot = read_adc ( );     //Lee el valor del ADC y lo guarda en la variable
0035:  BSF    1F.1
0036:  BTFSC  1F.1
0037:  GOTO   036
0038:  MOVF   1E,W
0039:  MOVWF  20
.................... 
....................         if ( ValorPot >= 128 ) {     //Compara el valor de el ADC con 128
003A:  MOVF   20,W
003B:  SUBLW  7F
003C:  BTFSC  03.0
003D:  GOTO   043
....................            output_HIGH ( LED );      // Leds activos
003E:  BSF    03.5
003F:  BCF    05.1
0040:  BCF    03.5
0041:  BSF    05.1
....................         } else {
0042:  GOTO   047
....................            output_LOW ( LED );       // Leds activos
0043:  BSF    03.5
0044:  BCF    05.1
0045:  BCF    03.5
0046:  BCF    05.1
....................         }
0047:  GOTO   02F
....................     }
.................... }
0048:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
